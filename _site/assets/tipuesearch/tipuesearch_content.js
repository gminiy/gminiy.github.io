var tipuesearch = {"pages": [{
    "title": "Decorator",
    "text": "1. 설정 2. 사용 예시 3. Decorator Factory 4. Decorator 합성 5. Decorator 역할 요약 Nest는 Decorator를 적극 활용한다. Decorator를 잘 사용하면 횡단 관심사를 분리하여 관점 지향 프로그래밍을 적용한 코드를 작성할 수 있다. 타입스크립트의 Decorator는 클래스, 메서드, 접근자, 프로퍼티, 매개변수에 적용 가능하다. 각 요소의 선언부 앞에 @로 시작하는 Decorator를 선언하면 구현된 코드가 함께 실행된다. 1. 설정 Decorator를 사용하려면 tsconfig.json의 experimentalDecorators 옵션을 true로 활성화해야 한다. tsconfig.json { \"compilerOptions\": { \"target\": \"ES5\", \"experimentalDecorators\": true } } 2. 사용 예시 function deco( target: any, propertyKey: string, descriptor: PropertyDescriptor ) { console.log(\"Decorator 가 평가됨\"); } class TestClass { @deco test() { console.log(\"test 함수 호출\"); } } const t = new TestClass(); t.test(); &gt; Decorator 가 평가됨 &gt; test 함수 호출 3. Decorator Factory 만약 Decorator 에 인수를 넘기고 싶다면 Decorator Factory, 즉 Decorator를 리턴하는 함수를 만들면 된다. function deco(value: string) { console.log(\"Decorator 평가됨\"); return function ( target: any, propertyKey: string, descriptor: PropertyDescriptor ) { console.log(value); }; } class TestClass { @deco(\"Hello\") test() { console.log(\"함수 호출됨\"); } } const t = new TestClass(); t.test(); &gt; Decorator 평가됨 &gt; Hello &gt; 함수 호출됨 4. Decorator 합성 여러 개의 Decorator를 사용한다면 다음과 같이 선언한다. 각 표현은 위에서 아래로 평가된다. 결과는 아래에서 위로 함수를 호출한다. function first() { console.log(\"first(): factory evaluated\"); return function ( target: any, propertyKey: string, descriptor: PropertyDescriptor ) { console.log(\"first(): called\"); }; } function second() { console.log(\"second(): factory evaluated\"); return function ( target: any, propertyKey: string, descriptor: PropertyDescriptor ) { console.log(\"second(): called\"); }; } class ExampleClass { @first() @second() method() {} } &gt; first(): factory evaluated &gt; second(): factory evaluated &gt; second(): called &gt; first(): called 5. Decorator 역할 요약 Decorator 역할 전달 인수 선언 불가능 위치 Class Decorator 클래스의 정의를 읽거나 수정 constructor d.ts 파일, declare 클래스 Method Decorator 메서드의 정의를 읽거나 수정 target, propertyKey, propertyDescriptor d.ts 파일, declare 클래스, 오버로드 메서드 Accessor Decorator 접근자의 정의를 읽거나 수정 target, propertyKey, propertyDescriptor d.ts 파일, declare 클래스 Property Decorator 속성의 정의를 읽거나 수정 target, propertyKey d.ts 파일, declare 클래스 Parameter Decorator 매개변수의 정의를 읽음 target, propertyKey, parameterIndex d.ts 파일, declare 클래스",
    "tags": "nestjs dev",
    "url": "/dev/2024/02/24/nest-decorator/"
  },{
    "title": "Nestjs",
    "text": "1. NestJS 장점 2. NestJS 설치 3. NestJS 보일러플레이트 4. 서버 실행 1. NestJS 장점 NestJS는 Express 또는 Fastify 프레임워크를 래핑하여 동작한다. Fastify는 Express보다 벤치마크 결과 2배 빠른 속도를 자랑한다. NestJS는 Fastify의 빠른 속도와 Express의 높은 호환성을 갖고자 한다. Node.js 의 과도한 유연함으로 인해 발생하는 문제점을 해결하기 위해 데이터베이스. 객체 관계 매핑(ORM), 설정, 유효성 검사 등의 기능을 기본으로 제공한다. 그러면서도 필요한 라이브러리를 쉽게 설치하여 사용하는 Node.JS 장점은 그대로 가지고 있다. 모듈/컴포넌트 기반으로 프로그램을 작성함으로써 재사용성을 높인다. 또 제어 반전, 의존성 주입, 관점 지향 프로그래밍 같은 객체 지향 개념을 도입했다. 기본으로 타입스크립트를 채택하고 있다. 2. NestJS 설치 Mac 버전으로 설명한다. NodeJS 먼저 설치한다. https://nodejs.org/en @nestjs/cli 를 npm으로 설치한다. $ npm i -g @nestjs/cli 프로젝트를 생성한다. $ nest new project-name 3. NestJS 보일러플레이트 ├── README.md ├── nest-cli.json ├── package-lock.json ├── package.json ├── src │ ├── app.controller.spec.ts │ ├── app.controller.ts │ ├── app.module.ts │ ├── app.service.ts │ └── main.ts ├── test │ ├── app.e2e-spec.ts │ └── jest-e2e.json ├── tsconfig.build.json └── tsconfig.json 4. 서버 실행 $ npm i $ npm run start:dev [5:51:40 PM] Starting compilation in watch mode... [5:51:41 PM] Found 0 errors. Watching for file changes. [Nest] 32419 - 02/25/2023, 5:51:42 PM LOG [NestFactory] Starting Nest application... [Nest] 32419 - 02/25/2023, 5:51:42 PM LOG [InstanceLoader] AppModule dependencies initialized +10ms [Nest] 32419 - 02/25/2023, 5:51:42 PM LOG [RoutesResolver] AppController {/}: +4ms [Nest] 32419 - 02/25/2023, 5:51:42 PM LOG [RouterExplorer] Mapped {/, GET} route +2ms [Nest] 32419 - 02/25/2023, 5:51:42 PM LOG [NestApplication] Nest application successfully started +2ms localhost에서 구동된 것을 확인할 수 있다. 포트는 기본으로 main.ts 에서 3000번으로 설정되어 있다. 본 포스트는 한용재 저자의 NestJS로 배우는 백엔드 프로그래밍을 기반으로 스터디하며 정리한 내용들입니다. NestJS로 배우는 백엔드 프로그래밍",
    "tags": "nestjs dev",
    "url": "/dev/2024/02/23/nest-basic/"
  }]};
